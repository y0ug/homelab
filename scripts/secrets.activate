#!/usr/bin/env bash

if [[ -n "${ZSH_VERSION}" ]]; then
    SCRIPT_PATH="${(%):-%N}"
elif [[ -n "${BASH_VERSION}" ]]; then
    SCRIPT_PATH="${BASH_SOURCE[0]:-$0}"
else
    SCRIPT_PATH="$0"
fi

SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
echo "SCRIPT_DIR: $SCRIPT_DIR" >&2

# Get the absolute path to secrets directory
SECRETS_DIR="$(realpath "$SCRIPT_DIR/../secrets")" || {
  echo "Failed to resolve secrets directory path" >&2
  return 1
}
echo "SECRETS_DIR: $SECRETS_DIR" >&2

if [ ! -d "$SECRETS_DIR" ]; then
  echo "Error: Secrets directory not found at: $SECRETS_DIR" >&2
  return 1
fi

_get_env() {
  ENV="${1:-prod}"
  if [ ! -d "$SECRETS_DIR/$ENV" ]; then
    echo "Environment $ENV not found in $SECRETS_DIR, using prod" >&2
    ENV="prod"
  fi
  echo "$ENV"
}

_setup_secrets() {
  local ENV=$(_get_env "$ENV")
  DEST="$(realpath "$SCRIPT_DIR/../.dec")"
  SRC="$SECRETS_DIR/$ENV"

  echo "Setting up secrets:" >&2
  echo "  ENV: $ENV" >&2
  echo "  DEST: $DEST" >&2
  echo "  SRC: $SRC" >&2

  # Verify source directory exists
  if [ ! -d "$SRC" ]; then
    echo "Error: Source directory not found at: $SRC" >&2
    return 1
  fi

  mkdir -p "$DEST"

  # Decrypt files
  sops -d "$SRC/kube_config.sops.yaml" >"$DEST/kube_config.dec.yaml" || echo "Warning: Failed to decrypt kube_config" >&2
  sops -d "$SRC/scw.sops.yaml" >"$DEST/scw.dec.yaml" || echo "Warning: Failed to decrypt scw" >&2
  sops -d "$SRC/terraform.sops.tfvars" >"$DEST/terraform.dec.tfvars" || echo "Warning: Failed to decrypt tfvars" >&2
  sops -d --output-type dotenv "$SRC/terraform.sops.yaml" >"$DEST/terraform.dec.env" || echo "Warning: Failed to decrypt terraform" >&2

  export KUBECONFIG="$DEST/kube_config.dec.yaml"
  export SCW_CONFIG_PATH="$DEST/scw.dec.yaml"
  export SECRETS_ACTIVATED=1

  # Source terraform env vars
  # if [ -f "$DEST/terraform.dec.env" ]; then
  #   set -a
  #   source "$DEST/terraform.dec.env"
  #   set +a
  # fi
}

_setup_secrets "$1"
